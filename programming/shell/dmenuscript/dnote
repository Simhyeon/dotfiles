#!/bin/bash

# 1. check if directory exists

# 1.5 if it doesn't exists then make new directory

# 2 Give input list to dmenu

# if directory doesn't exists than make new one
sourceDirectory=$HOME/notes
[ ! -d "$sourceDirectory" ] && mkdir $sourceDirectory

options="Read_html\nRead_org\nEdit_org\nNew_org\nAgenda\nRead_md\nEdit_md\nNew_md"
selection=$(echo -e $options | dmenu -i -p "Note Taking")

# special function for emacs read only
read_only() {
	emacs "$1" --eval '(setq buffer-read-only t)'
}
export -f read_only

# html file만 불러오는게 가능할까... 안 될 것 없긴 한데
fileList=""
case "$selection" in
	"Read_html")
		for file in "$sourceDirectory"/*
		do
			# filename is filename without directory prefix
			filename=$(basename -- "$file")
			# check the extension name
			[ "${filename##*.}" = "org" ] && fileList="${fileList}$filename\n"
		done
		source=$(echo -e -n $fileList | dmenu -i -p "File to read" -l 8 | xargs -r printf '%s/%s' $sourceDirectory)
		[ -z "$source" ] && exit 0
		emacs $source --batch -f org-html-export-to-html
		printf '%s.%s' "${source%.*}" "html" | xargs -r surf
		exit 0
		;;
	"Read_org")
		for file in "$sourceDirectory"/*
		do
			# filename is filename without directory prefix
			filename=$(basename -- "$file")
			# check the extension name
			[ "${filename##*.}" = "org" ] && fileList="${fileList}$filename\n"
		done
		echo -e -n $fileList | dmenu -i -p "File to read" -l 8 | xargs -r printf '%s/%s' $sourceDirectory | xargs -r bash -c 'read_only "$@"' -
		exit 0
		;;
	"Edit_org")
		for file in "$sourceDirectory"/*
		do
			# filename is filename without directory prefix
			filename=$(basename -- "$file")
			# check the extension name
			[ "${filename##*.}" = "org" ] && fileList="${fileList}$filename\n"
		done
		echo -e -n $fileList | dmenu -i -p "File to edit" -l 8 | xargs -r printf '%s/%s' $sourceDirectory | xargs -r emacs
		exit 0
		;;
	"New_org")
		if [ -x "$(command -v zenity)" ]; then
			newfilename=$(zenity --entry --text "File name" --title "dnote" --entry-text="" | xargs -r printf '%s.org')
			[ -z "$newfilename" ] && exit 0
		else
			newfilename=new_note.org
		fi
		touch $sourceDirectory/$newfilename
		emacs --chdir=$sourceDirectory $newfilename 
		;;
	"Agenda")
		emacs --eval '(progn (setq inhibit-splash-screen t) (org-agenda) (delete-other-windows))'
		;;
	"Read_md")
		for file in "$sourceDirectory"/*
		do
			# filename is filename without directory prefix
			filename=$(basename -- "$file")
			# check the extension name
			[ "${filename##*.}" = "md" ] && fileList="${fileList}$filename\n"
		done
		source=$(echo -e -n $fileList | dmenu -i -p "File to read" -l 8 | xargs -r printf '%s/%s' $sourceDirectory)
		[ -z "$source" ] && exit 0
		des=$(printf '%s.%s' "${source%.*}" "pdf") 
		pandoc $source -o $des
		zathura $des
		exit 0
		;;
	"Edit_md")
		for file in "$sourceDirectory"/*
		do
			# filename is filename without directory prefix
			filename=$(basename -- "$file")
			# check the extension name
			[ "${filename##*.}" = "md" ] && fileList="${fileList}$filename\n"
		done
		echo -e -n $fileList | dmenu -i -p "File to edit" -l 8 | xargs -r printf '%s/%s' $sourceDirectory | xargs -r emacs
		exit 0
		;;
	"New_md")
		if [ -x "$(command -v zenity)" ]; then
			newfilename=$(zenity --entry --text "File name" --title "dnote" --entry-text="" | xargs -r printf '%s.md')
			[ -z "$newfilename" ] && exit 0
		else
			newfilename=new_note.md
		fi
		touch $sourceDirectory/$newfilename
		emacs --chdir=$sourceDirectory $newfilename 
		;;
	*)
		echo "Unexpected behaviour"
		exit 1
		;;

esac
# get file name list from directory and make into dmenu readable list (separated by new line)

# 
